{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","to","activeClassName","active","name","Message","message","maxLength100","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","messageForm","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","key","messagesElements","messagesData","msg","addMessage","dialogs","messages","values","sendMessage","newMessageTextBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","sendMessageActionCreator","reset","Component","RedirectComponent","this","React"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,YAAc,+B,+FCY3OC,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,yBAAKC,UAAWC,IAAEC,QACd,kBAAC,IAAD,CAASC,GAAIL,EAAMM,gBAAiBH,IAAEI,QAASR,EAAMS,QCElDC,EANC,SAACV,GACb,OACI,yBAAKG,UAAWC,IAAEO,SAAUX,EAAMW,QAAlC,M,iCC6BFC,EAAeC,YAAiB,KAehCC,EAAsBC,YAAU,CAAEC,KAAM,oBAAlBD,EAbL,SAACf,GACpB,OACI,0BAAMiB,SAAUjB,EAAMkB,cAClB,yBAAKf,UAAWC,IAAEe,aACd,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUb,KAAK,qBAC1Bc,SAAU,CAACC,IAAUZ,GAAea,YAAY,uBACvD,6CASDC,EA3CC,SAAC1B,GACb,IAAI2B,EAAQ3B,EAAM4B,YACdC,EAAkBF,EAAMG,YACvBC,KAAI,SAAA1B,GAAM,OAAI,kBAAC,EAAD,CAAYI,KAAMJ,EAAOI,KAAMuB,IAAK3B,EAAOH,GAAIA,GAAIG,EAAOH,QAEzE+B,EAAmBN,EAAMO,aACxBH,KAAI,SAAAI,GAAG,OAAI,kBAAC,EAAD,CAASxB,QAASwB,EAAIxB,QAASqB,IAAKG,EAAIjC,GAAIkC,WAAYpC,EAAMoC,gBAM9E,OACI,yBAAKjC,UAAWC,IAAEiC,SACd,yBAAKlC,UAAWC,IAAE0B,aACbD,GAEL,yBAAK1B,UAAWC,IAAEkC,UACd,6BAAML,GACN,kBAACnB,EAAD,CAAqBG,SAXb,SAACsB,GACjBvC,EAAMwC,YAAYD,EAAOE,0B,gDCd7BC,EAA6B,SAACf,GAAD,MAAY,CACzCgB,OAAQhB,EAAMiB,KAAKD,S,eCkBRE,sBACXC,aAhBkB,SAACnB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACmB,GACtB,MAAO,CACHP,YAAa,SAACC,GACVM,EAASC,YAAyBP,IAClCM,EAASE,YAAM,2BDVK,SAACC,GAAe,IACtCC,EADqC,uKAGpC,OAAKC,KAAKpD,MAAM2C,OACR,kBAACO,EAAcE,KAAKpD,OADG,kBAAC,IAAD,CAAUM,GAAG,eAHR,GACX+C,IAAMH,WAStC,OAFqCJ,YAAQJ,EAARI,CAAqCK,KCO/DN,CAGZnB","file":"static/js/4.10e25cad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\",\"messageForm\":\"Dialogs_messageForm__36omN\"};","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './../Dialogs.module.css';\n\nconst DialogItem = (props) => {\n    let path = '/dialogs/' + props.id;\n    return (\n        <div className={s.dialog}>\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\n        </div>\n    )\n};\n\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css';\n\n\nconst Message = (props) => {\n    return (\n        <div className={s.message}>{props.message} </div>\n    )\n};\n\nexport default Message;","import React from 'react';\nimport DialogItem from './DialogItem/DialogItem';\nimport s from './Dialogs.module.css';\nimport Message from './Message/Message';\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\n\n\nconst Dialogs = (props) => {\n    let state = props.dialogsPage;\n    let dialogsElements = state.dialogsData\n        .map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id}/>);\n\n    let messagesElements = state.messagesData\n        .map(msg => <Message message={msg.message} key={msg.id} addMessage={props.addMessage}/>);\n\n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageTextBody)\n    };\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsData}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\n\n            </div>\n        </div>\n    )\n};\n\nconst maxLength100 = maxLengthCreator(100)\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div className={s.messageForm}>\n                <Field component={Textarea} name='newMessageTextBody'\n                       validate={[required, maxLength100]} placeholder='Enter your message'/>\n                <button>Send</button>\n            </div>\n\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm({ form: 'dialogAddMessage' }) (AddMessageForm)\n\nexport default Dialogs;","import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n           if (!this.props.isAuth) return <Redirect to='/login' />\n            return <Component {...this.props} />\n        }\n    }\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\n\n    return ConnectedAuthRedirectComponent;\n}\n\n","import React from 'react';\nimport {sendMessageActionCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\nimport {reset} from 'redux-form';\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessageTextBody) => {\n            dispatch(sendMessageActionCreator(newMessageTextBody));\n            dispatch(reset('dialogAddMessage'));\n        }\n    }\n};\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n) (Dialogs)"],"sourceRoot":""}